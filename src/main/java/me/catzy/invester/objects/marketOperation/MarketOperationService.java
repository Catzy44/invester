package me.catzy.invester.objects.marketOperation;

import java.io.IOException;
import java.net.URISyntaxException;
import java.time.LocalDate;
import java.util.List;
import java.util.concurrent.TimeUnit;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import me.catzy.invester.objects.article.Article;
import me.catzy.invester.objects.article.ArticleRepository;
import me.catzy.invester.objects.lmStudio.LMStudioService;
import me.catzy.invester.objects.lmStudio.LMStudioService.AICompletion;
import me.catzy.invester.objects.lmStudio.LMStudioService.AIMessage;
import me.catzy.invester.objects.lmStudio.LMStudioService.AIResponse;
import me.catzy.invester.objects.marketEvent.MarketEventRepository;
import me.catzy.invester.objects.twelveDataAPI.TwelveDataAPIService;
import me.catzy.invester.objects.twelveDataAPI.TwelveDataAPIService.APIResponse;

@Service
public class MarketOperationService {
	@Autowired LMStudioService serviceLM;
	@Autowired MarketEventRepository repoME;
	@Autowired ArticleRepository repoArticle;
	@Autowired TwelveDataAPIService serviceTwelve;
	
	@Scheduled(fixedRate = 1, initialDelay = 0, timeUnit = TimeUnit.HOURS)
	public void operateSch() throws URISyntaxException, IOException, InterruptedException {
		//operate();
	}
	
	//@Transactional
	public void operate() throws URISyntaxException, IOException, InterruptedException {
		AICompletion c = new AICompletion();
		
		{//ARTICLES AND MARKET EVENTS
			List<Article> articles = repoArticle.findAll();
			StringBuilder sb = new StringBuilder();
			articles.stream().forEach(a->{
				sb.append("article:"+a.title+",date:"+a.getTimestamp().toString());
				sb.append("estimated market events:");
				a.getEvents().stream().forEach(e->{
					sb.append(e.toString());
				});
			});
			AIMessage system = new AIMessage();
			system.role = "system";
			system.content = sb.toString();
			c.messages.add(system);
		}
		{//MARKET DATA
			LocalDate end = LocalDate.now();
			LocalDate start = end.minusWeeks(1);
			
			APIResponse resp = serviceTwelve.askAPI("1h", start, end);
			AIMessage system = new AIMessage();
			system.role = "system";
			system.content = resp.toString();
			c.messages.add(system);
		}
		{//OPEN POSITIONS
			AIMessage system = new AIMessage();
			system.role = "system";
			system.content = "NO OPEN POSITIONS\nAVAILABLE MONEY: 100USD";
			c.messages.add(system);
		}
		
		
		
		
		{//COMMAND
			AIMessage system = new AIMessage();
			system.role = "system";
			system.content = """
					You have been provided with the following data:

					1. Array of Articles. For every article there is an array of MarketEvents generated by LLM.
					2. List of all currently open market positions. You manage those.
					3. Market data from the last 14 days
					4. Available FIAT money to open new positions
					5. This command

					You are going to trade on EUR/USD market with NO LEVERAGE.
					Your goal is to earn more money than you lose.
					If you will not make any money in 7 days - you will be disabled.
					If you will not open any position in 24 hours - you will be disabled.
					If you will lose more than 50% of available money - you will be disabled.

					To open position reply with position you want to open
					To close a position reply with id of position you want to close

					Good luck.
					""";
			c.messages.add(system);
		}
		
		
		
		AIResponse resp = serviceLM.askAI(c);
		System.out.println(resp.response);
	}
}
